# 9. 이벤트 기초 및 활용

## 9-1. 이벤트

### 이벤트 개요

**이벤트(event)** : 마우스 클릭, 키보드 입력, 이미지나 HTML 문서의 로딩, 타임아웃 등 사용자의 입력 행위, 문서나 브라우저의 상태 변화를 브라우저가 자바스크립트 코드에게 알리는 **통지(notification)**이다.

**이벤트 리스너(event listener) :** 발생한 이벤트에 적절히 대처하기 위해 작성된 자바스크립트 코드

### 이벤트 종류

- **onKeydown :** 사용자가 아무 키를 누르는 순간
- **onkeypress** : 사용자가 알파뉴메릭 키를 누르는 순간
- **onkeyup**  : 사용자가 누른 키를 놓는 순간
- **onclick** : 사용자가 객체를 클릭할 때
- **ondblclick** : 객체에 더블 클릭될 때
- **onmousedown** : 객체에 마우스 버튼이 눌러지는 순간
- **onmouseover** : 마우스 커서가 객체 영역(자식들도 포함) 안으로 들어가는 순간
- **onmouseout** : 마우스 커서가 객체 영역(자식들도 포함)에서 벗어나는 순간
- **onwheel** : 마우스 휠을 굴리는 매 순간 (onmousewheel은 폐기되었다.)
- **onload** : 문서나 이미지의 로딩이 완료된 직 후
- **onfocus** : 객체가 포커스를 가지게 되었을 때
- **onblur** : 객체가 포커스를 잃을 때
- **onchange** : 선택된 내용, 체크 상태 등이 변할 때
- **onsubmit** : 사용자가 submit 버튼을 클릭하여 폼을 전송할 때

### 이벤트 리스너 만들기

- **HTML 태그 내에 작성** (리스너 코드가 짧은 경우 적합)

- ```html
  <p onmouseover="this.style.backgroundColor='orchid'" onmouseout="this.style.backgroundColor='white'">
    마우스를 올리면 orchid 색으로 변경
  </p>
  ```

- **DOM 객체의 이벤트 리스너 프로퍼티에 리스너 등록** (함수의 이름만 등록해야 한다. !!!)

- ```html
  <p id="p">마우스 올리면 orchid 색으로 변경</p>
  <script>
  	function over(){
      ...
    }
    var p = document.getElementById("p");
    p.onmouseover = over; // onmouseover 리스너로 over() 함수 등로
    //p.onmouseover = over(); 는 잘못된 이벤트 리스너의 등록 예시이다.
  </script>
  
  ```

- **DOM 객체의 addEventListener() 메소드 활용**

  - **addEvenetListener(eventName, listener, [useCaptuer])**
    eventName : 이벤트 타입을 나타내는 문자열. Click, load, keydown 등
    listener :  이벤트 리스너로 등록할 **함수 이름**
    useCapture : true이면 이벤트 흐름 중 캡쳐 단계에서 실행될 리스너(listnener 함수) 등록.
    						flase이면 버블 단계에서 실행될 리스너 등록. 생략 가능하며 디폴트는 false이다.

    ```javascript
    p.addEventListener("mouseover", over);	//onmouseover 리스너로 over() 함수 등록
    ```

  - 여러 개의 리스너를 addEventListner()함수로 중복 등록할 수 있다. (등록된 순서대로 호출된다.)

---

## 9-2. 이벤트 객체

### 이벤트 객체란?

이벤트가 발생하면, 브라우저는 **발생한 이벤트에 관련된 다양한 정보**를 담은 이벤트 객체(event object)를 만들어 이벤트 리스너에 전달한다. 

이벤트가 처리되고 나면 **이벤트 객체는 소멸**된다.

### 이벤트 객체 전달받기

**이벤트 객체는 이벤트 리스너 함수의 첫 번째 매개변수로 전달된다.**

1. **이름을 가진 이벤트 리스너 함수의 경우** : 이벤트 리스너 함수는 첫 번째 매개변수를 통해 이벤트 객체를 전달받을 수 있다.

   ```javascript
   fuction f(e) {	// 매개변수 e에 이벤트 객체르 전달받음. e는 생략 가능
     ...
   }
   obj.onclick = f;	// obj 객체의 onclick 리스너로 함수 f 등록
   ```

2. **익명 함수의 경우** : 첫 번째 매개변수(e)를 통해 이벤트 객체를 전달받는다.

   ```javascript
   obj.onclick = function(e){	// 매개변수 e에 이벤트 객체를 전달받음. e는 생략 가능
     ...
   }
   ```

3. **HTML 태그의 리스너 경우** : HTML 태그에 리스너를 만드는 경우 이벤트 객체는 **event**라는 이름으로 전달된다.

   ```html
   <script>
   	function f(e){
       ...
     }
   </script>
   ...
   <button onclick="f(event)">
     버튼
   </button>
   <div onclick="alert(event.type)">
     버튼
   </div>
   ```

### 이벤트 객체에 들어 있는 정보

- **type 프로퍼티 :** 현재 발생한 이벤트 종류를 나타내는 문자열 (click, load 등)
- **target 프로퍼티 :** 이벤트를 발생시킨 객체(DOM 객체 혹은 HTML 태그)
- **currentTarget 프로퍼티 :** 현재 이벤트 리스너를 실행하고 있는 DOM 객체
- **defaultPrevented 프로퍼티** : 이벤트의 디폴트 행동이 취소되었는지를 나타내는 true/false 값
- **preventDefault() 메소드 :** 이벤트의 디폴트 행동을 취소시키는 메소드

### 이벤트의 디폴트 행동 취소, preventDefault()

HTML 태그 중 몇몇은 특정 이벤트에 대해 **디폴트 행동(defaut action)** (ex. \<a>태그를 클릭하면 웹 페이지를 로딩하는 행동, submit 버튼을 클릭하면 폼 데이터를 웹 서버로 전송하는 것, reset 버튼을 클릭하면 폼을 초기화시키는 것, ...)을 한다. 

**자바스크립트 코드로 디폴트 행동을 일으키지 않게끔 만드는 코드**

1. 이벤트 리스너에 false를 리턴한다.

   ```html
   <a href="http://www.naver.com" onclick="return false"> 이동 안되는 링크</a>
   ```

2. 이벤트 객체의 preventDefault()를 호출한다.

   ```html
   <a href="http://www.naver.com" onclick="event.preventDefault()"> 이동 안되는 링크 </a>
   ```

3. 이벤트의 디폴트 행동 취소 예제

   ```html
   <!doctype html>
   <html>
     <head>
       <script>
       	function query(){
           var ret = confirm("네이버로 이동하시겠습니까?");
           return ret;	// confirm()의 리턴 값은 true 또는 false
         }
         function noAction(e){
           e.preventDefault();	// 이벤트의 디폴트 행동 강제취소
         }
       </script>
     </head>
     <body>
       <h3>이벤트의 디폴트 행동 취소</h3>
       <hr>
       <a href="http://www.naver.com" onclick="return query()">
       	네이버로 이동할 지 물어보는 링크</a>
       <hr>
       <form>
         <input type="checkbox">빵(체크 됨)<br>
         <input type="checkbox" onclick="noAction(event)">술(체크 안됨)
       </form>
     </body>
   </html>
   ```

---

## 9-3. 이벤트 흐름

### 이벤트 흐름과 이벤트 리스너

**이벤트 흐름(event propagation)** : 발생한 이벤트는 window 객체로부터 DOM 트리를 타고 중간 DOM 객체들을 거쳐 타켓 객체로 흘러들어가고, 다시 반대 방향으로 이동하여 window 객체에 도달한 후 없어진다.

**캡쳐 단계(capture phase)** : window에서 타켓 객체까지 이벤트 객체가 전파되는 과정이다.

**캡쳐 리스너(capture listener) :** 캡쳐 단계에서 실행되도록 작성된 리스너를 의미한다.

**버블 단계(bubbling phase) :** 타켓 객체에서 거꾸로 window까지 이벤트 객체가 전파되는 과정을 의미한다.

**버블 리스너(bubble listener)** : 버블 단계에서 실행되도록 작성된 이벤트 리스너를 의미한다.

### 캡쳐 리스너와 버블 리스너

하나의 DOM 객체는 캡쳐 리스너와 버블 리스너를 모두 가질 수 있다. 그러므로 이벤트 리스너를 등록할 때 캡쳐 리스너인지 버블 리스너인지 분명히 지정하여야 한다. addEventListener()의 경우 **3번째 매개 변수가 true이면 캡쳐 리스너로, false이면 버블 리스너로** 등록한다.

```javascript
var b = document.getElementById("button");
b.addEventListener("click", capFunc, true);				// 캡쳐 단계에서 capFunc() 실행
b.addEventListener("click", bubbleFunc, false);		// 버블 단계에서 bubbleFunc() 실행
```

**<u>addEventListnener() 외 다른 방법으로 이벤트 리스를 등록하는 경우 모두 버블 리스너로 자동 등록된다.</u>**

**이벤트 객체의 멤버 중 이벤트의 흐름과 관계된 멤버**

- cancelable 프로퍼티 : 디폴트 행동 취소 가능한 이벤트 여부. true/false 값
- stopPropagation() 메소드 : 객체에 등록된 리스너들 모두 실행 후 이벤트 흐름 중단
- stopImmediatePropagation() 메소드 : 현재 리스너만 실행하고 이벤트 흐름 즉각 중단

---

## 9-4. 마우스 핸들링

이 절에서는 웹 페이지 개발에 가장 많이 활용되는 마우스 관련 이벤트를 다루고자 한다.

### 마우스 이벤트 객체의 프로퍼티

- x,y : (x,y)는 타켓 객체의 부모 객체 내에서의 마우스 좌표
- clientX, clientY : (clientX, clientY)는 브라우저 윈도우의 문서출력 영역 내에서의 마우스 좌표
- screenX, screenY : (screenX, screenY)는 스크린을 기준으로 한 마우스 좌표
- offsetX, offsetY : (offsetX, offsetY) 는 타켓 객체 내에서의 마우스 좌표
- button : 눌러진 마우스 버튼
  - 0 : 아무 버튼도 눌러지지 않았음
  - 1 : 왼쪽 버튼이 눌러졌음
  - 2 : 오른쪽 버튼이 눌러졌음
  - 3 : 왼쪽, 오른쪽 버튼이 모두 눌러졌음
  - 4 : 중간 버튼이 눌러졌음
- wheelDelta : 마우스 휠이 구른 방향
  - 양수 : 위쪽으로 굴린 경우
  - 음수 : 아래쪽으로 굴린 경우

### 마우스 관련 이벤트 리스너

- onclick : 사용자가 HTML 태그를 클릭하였을 때 발생하는 이벤트 리스너

- ondblclick : 사용자가 HTML 태그를 더블클릭하였을 때 발생하는 이벤트 리스너
- onmousedown : HTML 태그에 마우스 버튼을 누르는 순간
- onmouseup : 눌러진 마우스 버튼이 놓여지는 순간
- onmouseover : 마우스가 HTML 태그 위로 올라오는 순간. (자식 영역 포함)
- onmouseout : 마우스가 HTML 태그를 벗어나는 순간. (자식 영역 포함)
- onmouseenter : 마우스가 HTML 태그 위로 올라오는 순간. (이벤트 버블 단계 없음)
- onmouseleave : 마우스가 HTML 태그를 벗어나는 순간. (이벤트 버블 단계 없음)
- onwheel : HTML 태그에 마우스 휠이 구르는 동안 계속 호출
- onmousemove : 마우스가 움직이는 동안 계속 호출
- oncontextmenu : 컨텍스트 메뉴(마우스 오른쪽 버튼을 클릭할 때 출력되는 메뉴)가 출력되기 전 호출되는 이벤트 리스너

---

## 9-5. 문서와 이미질 로딩, onload

onload는 HTML 문서나 이미지의 로딩이 완료되는 시점에 호출되는 이벤트 리스너이다.

### 문서의 로딩 완료와 onload

웹 페이지의 출력(로딩)이 완료되면 **window 객체에 load 이벤트**가 발생한다.

**onload 리스너의 작성 방법(2가지)**

```html
<script>
	window.onload = "alert('onload')";
</script>
<body onload = "alert('onload')"></body>

<!-- document.onload=function(){}는 예전에는 잘 사용하였지만 요즘에는 잘 사용하지 않는다. -->
```

### 이미지 로딩 완료와 onload

이미지가 출력되는 과정은 이미지 파일로부터 **로딩하는 과정**과 로딩된 **이미지를 출력하는 두 과정**으로 나뉜다.

**Image 객체의 프로퍼티**

- src : 이미지 주소

- width : 이미지가 출력될 폭. 이미지가 로딩되면 이미지의 실제 폭으로 초기화

- height : 이미지가 출력될 높이. 이미지가 로딩되면 이미지의 실제 높이로 초기화

- complete : 이미지의 로딩이 완료되었는지 여부, true/false

- Image 객체 활용 예시

  ```html
  <img id="myImg" src="apple.png" width="..." height="...">
  <script>
  	var myImg = document.getElementById("myImg");	//myImg는 Image객체
    myImg.src = "banana.png"											//<img> 태그에 banana.png 이미지 출력
  </script>
  ```

**이미지 로딩 완료와 onload**

- 활용 예시

  ```javascript
  var myImg = document.getElementById("myImg");
  myImg.src = "banana.png";	
  myImg.onload = function(){	//이미지 로딩 완료 시 실행되는 함수
    var width = myImg.width;	//정확한 이미지 폭을 알 수 있음
  }
  ```

### new Image()로 이미지 로딩과 출력

동적으로 Image 객체를 만들고 banana.png 이미지를 로딩시키는 코드

```javascript
var bananaImg = new Image();	// 이미지 객체 생성
bananaImg.src = "banana.png"	// 이미지 로딩 지시. 이미지 로딩이 완료될 때 onload 호출
```

**로딩된 이미지 출력**

```javascript
var myImg = document.getElementById("myImg");
myImg.src = bananaImg.src	// bananaImg 객체에 로딩된 이미지를 <img> 태그에 출력
```

---

## 9-6. 폼과 이벤트 활용

### onblur와 onfocus

이들은 포커스(focus)가 변경될 떄 호출된다.

HTML 요소가 포커스를 받게 될 때 onfocus 리스너가 호출되고, 포커스를 잃는 요소에서는 onblur리스너가 호출된다.

```html
<!onfocus와 onblur, 이름을 입력하지 않고 다른 창으로 갈 수 없음-->
<!DOCTYPE html>
<html>
  <head>
    <title>onfocus and onblur</title>
    <script>
    	function checkFiled(obj){
        if(obj.value==""){
          alert("enter name!");
          obj.focus();	// obj에 다시 포커스
        }
      }
    </script>
  </head>
  <body>
    
  </body>
</html>
```









































