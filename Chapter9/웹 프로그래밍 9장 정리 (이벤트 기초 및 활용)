# 9. 이벤트 기초 및 활용

## 9-1. 이벤트

### 이벤트 개요

**이벤트(event)** : 마우스 클릭, 키보드 입력, 이미지나 HTML 문서의 로딩, 타임아웃 등 사용자의 입력 행위, 문서나 브라우저의 상태 변화를 브라우저가 자바스크립트 코드에게 알리는 **통지(notification)**이다.

**이벤트 리스너(event listener) :** 발생한 이벤트에 적절히 대처하기 위해 작성된 자바스크립트 코드

### 이벤트 종류

- **onKeydown :** 사용자가 아무 키를 누르는 순간
- **onkeypress** : 사용자가 알파뉴메릭 키를 누르는 순간
- **onkeyup**  : 사용자가 누른 키를 놓는 순간
- **onclick** : 사용자가 객체를 클릭할 때
- **ondblclick** : 객체에 더블 클릭될 때
- **onmousedown** : 객체에 마우스 버튼이 눌러지는 순간
- **onmouseover** : 마우스 커서가 객체 영역(자식들도 포함) 안으로 들어가는 순간
- **onmouseout** : 마우스 커서가 객체 영역(자식들도 포함)에서 벗어나는 순간
- **onwheel** : 마우스 휠을 굴리는 매 순간 (onmousewheel은 폐기되었다.)
- **onload** : 문서나 이미지의 로딩이 완료된 직 후
- **onfocus** : 객체가 포커스를 가지게 되었을 때
- **onblur** : 객체가 포커스를 잃을 때
- **onchange** : 선택된 내용, 체크 상태 등이 변할 때
- **onsubmit** : 사용자가 submit 버튼을 클릭하여 폼을 전송할 때

### 이벤트 리스너 만들기

- **HTML 태그 내에 작성** (리스너 코드가 짧은 경우 적합)

- ```html
  <p onmouseover="this.style.backgroundColor='orchid'" onmouseout="this.style.backgroundColor='white'">
    마우스를 올리면 orchid 색으로 변경
  </p>
  ```

- **DOM 객체의 이벤트 리스너 프로퍼티에 리스너 등록** (함수의 이름만 등록해야 한다. !!!)

- ```html
  <p id="p">마우스 올리면 orchid 색으로 변경</p>
  <script>
  	function over(){
      ...
    }
    var p = document.getElementById("p");
    p.onmouseover = over; // onmouseover 리스너로 over() 함수 등로
    //p.onmouseover = over(); 는 잘못된 이벤트 리스너의 등록 예시이다.
  </script>
  
  ```

- **DOM 객체의 addEventListener() 메소드 활용**

  - **addEvenetListener(eventName, listener, [useCaptuer])**
    eventName : 이벤트 타입을 나타내는 문자열. Click, load, keydown 등
    listener :  이벤트 리스너로 등록할 **함수 이름**
    useCapture : true이면 이벤트 흐름 중 캡쳐 단계에서 실행될 리스너(listnener 함수) 등록.
    						flase이면 버블 단계에서 실행될 리스너 등록. 생략 가능하며 디폴트는 false이다.

    ```javascript
    p.addEventListener("mouseover", over);	//onmouseover 리스너로 over() 함수 등록
    ```

  - 여러 개의 리스너를 addEventListner()함수로 중복 등록할 수 있다. (등록된 순서대로 호출된다.)

---

## 9-2. 이벤트 객체

### 이벤트 객체란?

이벤트가 발생하면, 브라우저는 **발생한 이벤트에 관련된 다양한 정보**를 담은 이벤트 객체(event object)를 만들어 이벤트 리스너에 전달한다. 

이벤트가 처리되고 나면 **이벤트 객체는 소멸**된다.

### 이벤트 객체 전달받기

**이벤트 객체는 이벤트 리스너 함수의 첫 번째 매개변수로 전달된다.**

1. **이름을 가진 이벤트 리스너 함수의 경우** : 이벤트 리스너 함수는 첫 번째 매개변수를 통해 이벤트 객체를 전달받을 수 있다.

   ```javascript
   fuction f(e) {	// 매개변수 e에 이벤트 객체르 전달받음. e는 생략 가능
     ...
   }
   obj.onclick = f;	// obj 객체의 onclick 리스너로 함수 f 등록
   ```

2. **익명 함수의 경우** : 첫 번째 매개변수(e)를 통해 이벤트 객체를 전달받는다.

   ```javascript
   obj.onclick = function(e){	// 매개변수 e에 이벤트 객체를 전달받음. e는 생략 가능
     ...
   }
   ```

3. **HTML 태그의 리스너 경우** : HTML 태그에 리스너를 만드는 경우 이벤트 객체는 **event**라는 이름으로 전달된다.

   ```html
   <script>
   	function f(e){
       ...
     }
   </script>
   ...
   <button onclick="f(event)">
     버튼
   </button>
   <div onclick="alert(event.type)">
     버튼
   </div>
   ```

### 이벤트 객체에 들어 있는 정보

- **type 프로퍼티 :** 현재 발생한 이벤트 종류를 나타내는 문자열 (click, load 등)
- **target 프로퍼티 :** 이벤트를 발생시킨 객체(DOM 객체 혹은 HTML 태그)
- **currentTarget 프로퍼티 :** 현재 이벤트 리스너를 실행하고 있는 DOM 객체
- **defaultPrevented 프로퍼티** : 이벤트의 디폴트 행동이 취소되었는지를 나타내는 true/false 값
- **preventDefault() 메소드 :** 이벤트의 디폴트 행동을 취소시키는 메소드

### 이벤트의 디폴트 행동 취소, preventDefault()





















